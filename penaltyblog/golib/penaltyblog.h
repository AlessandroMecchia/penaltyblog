/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package penaltyblog/gosrc */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */









/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


// Compute the Bivariate Poisson Log-Likelihood
//
extern double ComputeBivariatePoissonLoss(double* params, int nTeams, int* homeIdx, int* awayIdx, int* goalsHome, int* goalsAway, double* weights, int nMatches);

// Compute the Bivariate Poisson Probability Matrix
//
extern void ComputeBivariatePoissonProbabilities(double home_attack, double away_attack, double home_defense, double away_defense, double home_advantage, double correlation_log, int max_goals, double* score_matrix, double* lambda1, double* lambda2);

// Compute the negative log-likelihood for Dixon-Coles model
//
extern double DixonColesLogLikelihood(double* params, int nTeams, int* homeIdx, int* awayIdx, int* goalsHome, int* goalsAway, double* weights, int nMatches);

// Compute Poisson probabilities for scores
//
extern void ComputeDixonColesProbabilities(double home_attack, double away_attack, double home_defense, double away_defense, double home_advantage, double rho, int max_goals, double* score_matrix, double* lambda_home, double* lambda_away);

// Compute the Negative Binomial log-likelihood
//
extern double ComputeNegativeBinomialLoss(double* params, int nTeams, int* homeIdx, int* awayIdx, int* goalsHome, int* goalsAway, double* weights, int nMatches);

// Compute Negative Binomial probabilities for scores
//
extern void ComputeNegativeBinomialProbabilities(double home_attack, double away_attack, double home_defense, double away_defense, double home_advantage, double dispersion, int max_goals, double* score_matrix, double* lambda_home, double* lambda_away);

// Sequential log-likelihood calculation (No Goroutines)
//
extern double PoissonLogLikelihood(double* params, int n_teams, int* home_idx, int* away_idx, int* goals_home, int* goals_away, double* weights, int n_matches);

// Compute Poisson probabilities for scores
//
extern void ComputePoissonProbabilities(double home_attack, double away_attack, double home_defense, double away_defense, double home_advantage, int max_goals, double* score_matrix, double* lambda_home, double* lambda_away);

// Compute the Weibull-Copula Model Log-Likelihood
//
extern double ComputeWeibullCopulaLoss(double* params, int nTeams, int* homeIdx, int* awayIdx, int* goalsHome, int* goalsAway, double* weights, int nMatches, int maxGoals);

// Compute the Weibull-Copula Probability Matrix
//
extern void ComputeWeibullCopulaProbabilities(double home_attack, double away_attack, double home_defense, double away_defense, double home_advantage, double shape, double kappa, int max_goals, double* score_matrix, double* lambdaH, double* lambdaA);

// Compute the negative log-likelihood for Zero-Inflated Poisson (ZIP) model
//
extern double ComputeZeroInflatedPoissonLoss(double* params, int nTeams, int* homeIdx, int* awayIdx, int* goalsHome, int* goalsAway, double* weights, int nMatches);

// Compute Zero-Inflated Poisson probabilities for scores
//
extern void ComputeZeroInflatedPoissonProbabilities(double home_attack, double away_attack, double home_defense, double away_defense, double home_advantage, double zero_inflation, int max_goals, double* score_matrix, double* lambda_home, double* lambda_away);

#ifdef __cplusplus
}
#endif
